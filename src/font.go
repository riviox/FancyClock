// Code generated by go-bindata.
// sources:
// assets/font.flf
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFontFlf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x49\x72\xdb\x3a\x10\xdd\xf3\x14\xbd\xf0\xd6\x92\xec\xaf\x1f\xc7\xda\x84\xd9\x38\xe5\x45\x0e\xa1\x68\xb0\x94\xc1\x74\x51\x4c\x54\xd9\xc9\x55\x5e\xe4\x04\xba\x4a\xf6\x39\x8a\x4f\x92\x12\x45\x41\x8d\xc6\x6b\x02\x1c\xe4\x24\x55\xfc\x9f\xe5\x00\x24\x01\x74\xbf\x7e\x3d\xb0\x35\xff\x3c\xbf\x1c\x9f\xd1\x15\x5d\xd1\xc5\x7f\x34\xa0\x2b\x1a\xd0\xab\x21\x0d\xa2\x9b\xe4\x3e\xa3\xb7\x5f\xb3\x45\x92\x8e\xe8\x4d\x14\xbd\x4f\xd2\x19\xdd\xde\xcf\x93\x51\x14\x2d\xb2\xec\x61\x35\xea\xf7\xd7\xb3\x0f\xbd\x71\x3a\x59\x2c\xbf\xcd\x7a\x49\x7a\xb7\x9b\xf7\x2f\x07\x17\x97\x83\xd7\x17\xd7\x83\xe1\x70\xf8\xff\x75\x7f\xf7\xea\xee\xcd\xf5\xba\x97\x26\xdf\x57\xe3\x49\x6f\x92\x7c\xe9\x67\x8b\xd9\x34\x1d\xaf\xe7\xc9\x7d\xb6\x3a\xcf\xa6\xf3\xde\x78\xf5\x10\x45\x37\xb7\xef\xf2\x53\x27\xe9\x6c\x9c\xcd\xa6\xb4\x5e\x66\x8b\x11\x15\x3b\x3c\x8c\xb3\x24\xfd\xf8\x29\x5f\x3e\x5f\xde\xed\x96\x9e\xcf\xa6\xcb\x2c\x49\xa3\x33\xa2\xb3\x38\xe4\x6f\x1c\x3d\x6f\x7f\xec\xae\xcd\xa3\x3a\xdc\x3c\xee\x2f\xed\x2e\x11\xc5\x71\x64\xfd\x1f\x47\x64\xde\x65\x23\xb3\x83\x7b\x1d\xf6\x3c\xcc\xc4\xb8\xc9\x4a\x32\xb2\xb2\x51\x2e\xf6\xfe\xbf\x1c\x84\xa7\xfc\x32\xdb\xee\xa6\xbf\x7e\x32\x8d\xc5\xa5\xc9\x63\x41\x23\x84\x09\x58\xb3\xdd\x14\x97\x85\xee\x51\x4a\x07\x52\x7e\x9a\xad\x34\xf1\x39\x71\x83\xec\xe6\x24\x54\x03\xfb\x91\x2b\x44\x9c\x8f\x8e\x62\x10\x81\x1b\xe5\x86\x52\xac\xa4\xc1\x53\x88\xea\xe0\x5f\x3c\xe0\x36\x54\x09\x68\x9f\xca\x61\x14\x63\x0b\x07\xa9\x7e\x5c\xfe\x32\x1e\x8b\x83\x05\xfb\xe2\x83\x02\x39\x01\x99\x81\xb6\x4f\xc7\x6d\xf8\x66\x1b\x0b\xb5\xed\x26\x37\xb3\x43\x69\xf3\xaf\x8b\x49\xf1\x90\xff\x29\x78\x0f\x7d\x5a\xec\xe7\x18\x08\xb1\xfd\x48\x17\x20\x0f\x16\x40\x0f\x2a\xc4\xd9\x65\x73\xad\x06\xcb\xc9\xe2\x12\x17\x8d\x62\x09\x38\xe2\xc8\x11\x7d\x64\x61\x67\x20\xf0\x42\x8e\x86\x4e\x14\xec\xb3\x28\x6f\x33\x1e\x30\x0d\xc4\x43\x9d\x9d\x3a\xc5\x5d\x0c\xd4\x98\xe6\xc0\x26\xbd\x4c\x28\x50\x12\x1b\x90\xca\x4a\x0c\x6c\x41\x40\x0a\x0f\xd2\xd2\x7f\x15\x9b\x58\x21\x02\x86\x01\x74\xb7\x52\x06\x21\xd7\x23\x08\x04\x6a\x05\x29\x14\x84\x4f\x9f\xd4\xca\x0d\x1a\xe6\x76\x61\x1c\xc2\xab\xda\x74\xb9\xba\x36\x13\x47\xb9\x71\xcb\xca\xa2\xfb\x39\x4a\x74\x08\x30\xa8\x77\xa9\xd2\x8a\x8b\x86\xac\x01\x28\xb5\x2e\x9e\x13\x9e\xea\x38\x34\x12\x4d\x4f\x37\xf8\xae\x49\x52\x9e\xb5\xc7\x0c\x7a\x28\xdd\xc4\x5a\x20\x3d\xb0\x81\x28\x2b\xa8\x50\x89\x33\x49\xfa\x90\x9b\xe3\x2d\x1a\x79\xb6\xf3\x8a\x62\xf3\xaf\x5e\xf8\x25\xab\xb2\x36\xc2\x8b\x42\x97\x2c\x98\x0a\xf0\x98\x08\x1e\x92\x85\xb9\xbf\x79\xe8\x0c\x7c\x0f\xf7\x33\x27\xff\x57\xcf\xd5\xc1\x6e\x11\x1c\xbd\xc1\x13\x82\x1f\x08\x15\x12\x45\x75\xe1\xfc\x21\x45\x5f\xe3\x4f\xab\xd8\xde\x01\x99\x6c\x5f\xe6\x11\x98\x07\x86\x9d\x76\x11\xab\x5b\x17\x84\x23\x15\xce\x1b\x07\x2b\xae\x0b\x74\x25\xfd\xeb\xae\x49\xf9\x76\x0a\xf1\x2c\x33\x1f\x22\x48\x83\x18\x62\x62\xa2\x63\x30\xd7\x92\xd2\xf7\x54\x6b\x56\x29\x38\x9a\x16\x94\x27\x8a\x19\x32\x75\x7a\x87\x76\x6e\xd5\xea\x59\x7d\xbe\x1f\x7a\x41\x0e\xad\x08\x7c\xe8\x3e\xa3\xe0\x66\x9f\xa2\x75\x52\x20\x5b\xaa\x61\xab\x85\xae\xb0\x79\x73\x17\xe5\x6c\x46\x14\x3b\x02\x84\x98\x26\x90\x52\xc8\x88\xc6\x96\x05\x0c\x5a\x18\x42\xfc\xf9\x53\xa6\x09\x52\x03\xf7\x6c\x5c\x1a\x68\xc2\x6b\x92\xab\x06\x20\x49\x4d\x2e\x7b\xf3\x02\x07\x6a\x7b\xb2\xe0\xe4\x15\xb2\x34\x44\x29\x95\x03\x08\xb9\x6d\x46\xf4\x70\xd0\xf6\xcd\xe0\x3a\xc0\xb1\x0a\xf7\x05\x81\x83\x9a\x79\x38\xf8\x2f\x36\x0e\xf0\x72\x67\x07\x47\xe4\x90\x1e\x36\xbc\xc1\x88\xa7\xe6\xe8\x10\xb7\xfb\x33\x4e\xda\x96\x18\x4e\x56\x04\x81\xce\x7c\xcf\x09\xc1\x4a\x24\xd3\x64\xd0\xf3\xb2\x16\x97\xb9\x1c\x0a\x8e\x62\xac\x43\x29\xd0\x2c\x29\x19\x50\x36\x00\xf0\x98\x2d\xdd\xb7\x65\xb3\xba\x86\xcb\xb6\x67\x35\x7e\xaf\xae\x3f\x04\xb8\x25\x93\x87\x74\x90\xb8\x24\x21\x7b\x07\x16\x37\x36\xde\x1c\x44\x38\x06\xc7\x98\xb6\x39\xee\xc1\x00\x2b\x78\x7f\x2a\x2a\x3b\xc5\xc2\x83\x50\xa5\x52\xe9\xe7\x18\xeb\x67\x19\x99\x4d\xe1\xa8\x21\xf8\xca\x2f\x74\x9a\x52\x15\xf2\x85\x6f\x4d\xd7\x12\xe9\x5a\x22\x75\xb0\xe2\xba\x74\x2d\x11\x08\xb4\x6b\xb0\x17\x2c\x68\xea\x10\xe7\xc4\x31\xa3\x6b\x89\x74\x2d\x11\x8d\x69\x02\x29\x85\x8c\x68\xdc\xb5\x44\xba\x96\x08\x0a\xb9\x5d\x4b\x24\x04\x38\xa8\x99\x87\x83\x5d\x4b\x24\xe0\x06\x23\x5e\xd7\x12\x11\x42\x38\xc2\x75\x2d\x11\x08\x8f\xd9\xd2\x7d\xbb\x6b\x89\x68\x20\x71\x49\x42\xf6\x2e\x09\x1a\xe2\xab\xfc\xaf\x9c\xfe\x0e\x00\x00\xff\xff\x44\xf3\xef\x8c\x94\x2f\x00\x00")

func assetsFontFlfBytes() ([]byte, error) {
	return bindataRead(
		_assetsFontFlf,
		"assets/font.flf",
	)
}

func assetsFontFlf() (*asset, error) {
	bytes, err := assetsFontFlfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/font.flf", size: 12180, mode: os.FileMode(420), modTime: time.Unix(1708616250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/font.flf": assetsFontFlf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"font.flf": &bintree{assetsFontFlf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

